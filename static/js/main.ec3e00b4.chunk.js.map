{"version":3,"sources":["redux/propertyListActions.js","redux/propertyListReducer.js","redux/reducers.js","redux/configureStore.js","components/PropertyItem/PropertyItem.js","components/PropertyList/PropertyList.js","components/Navigation/Navigation.js","components/App/App.js","serviceWorker.js","index.js"],"names":["FETCH_PROPERTIES_BEGIN","FETCH_PROPERTIES_SUCCESS","FETCH_PROPERTIES_FAILURE","defaultState","fetchedProperties","streamListReducer","state","action","type","payload","rootReducer","combineReducers","propertyListReducer","configureStore","initialState","createStore","compose","applyMiddleware","thunk","logger","cacheEnhancer","log","window","__REDUX_DEVTOOLS_EXTENSION__","f","PropertyItem","props","Card","className","href","property","slug","target","rel","open_graph_image_cache","CardImg","top","width","src","alt","CardBody","CardTitle","Truncate","lines","ellipsis","title","CardSubtitle","city","number_of_bedrooms","beds_adults","property_price","Button","color","PropertyList","loadMore","propertiesToLoad","page","this","fetchMoreProperties","setState","then","concat","length","pageStart","loadMoreProperties","bind","hasMore","useWindow","threshold","loader","key","Spinner","map","i","style","position","height","transform","left","React","Component","connect","dispatch","a","axios","get","params","country","adults","children","response","data","properties","err","error","Navigation","toggle","isOpen","Navbar","light","expand","background","NavbarBrand","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","store","App","basename","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec3e00b4.chunk.js","sourcesContent":["import axios from \"axios\";\n\n/*\n * CONSTANTS\n */\n\n// fetch properties\nexport const FETCH_PROPERTIES_BEGIN = \"FETCH_PROPERTIES_BEGIN\";\nexport const FETCH_PROPERTIES_SUCCESS = \"FETCH_PROPERTIES_SUCCESS\";\nexport const FETCH_PROPERTIES_FAILURE = \"FETCH_PROPERTIES_FAILURE\"; \n\n/*\n * FUNCTIONS\n */\n\n// fetch properties\nexport const fetchMoreProperties = (page) => {    \n    return async (dispatch) => {\n        try {            \n            dispatch(fetchMoreBegin())            \n            // call api\n            const response = (await axios.get(\"https://api.emerald-stay.fr/api/properties\", {                \n                params: {\n                    country: 1,\n                    adults: 1,\n                    children: 0,\n                    page: page\n                }\n            })).data.data.properties;            \n\n            dispatch(fetchMoreSuccess(response))\n\n        } catch (err) {\n            dispatch(fetchMoreFailure(err))\n        }\n    }\n}\n\nfunction fetchMoreBegin() {\n    return  {\n        type: FETCH_PROPERTIES_BEGIN\n    }\n}\n\nfunction fetchMoreSuccess(responseData) {\n    return {\n        type: FETCH_PROPERTIES_SUCCESS,\n        payload: responseData\n    }\n}\n\nfunction fetchMoreFailure(err) {\n    return {\n        type: FETCH_PROPERTIES_FAILURE,\n        error: err\n    }\n}\n","import { \n    FETCH_PROPERTIES_BEGIN,\n    FETCH_PROPERTIES_SUCCESS,\n    FETCH_PROPERTIES_FAILURE\n} from \"./propertyListActions\"\n\nconst defaultState = {\n    fetchedProperties: []\n}\n\nconst streamListReducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case FETCH_PROPERTIES_BEGIN:\n            return {\n                ...state\n            }\n        case FETCH_PROPERTIES_SUCCESS:\n            return {\n                ...state,\n                fetchedProperties: action.payload\n            }\n        case FETCH_PROPERTIES_FAILURE:\n            return {\n                ...state\n            }\n        default: \n            return state\n    }\n}\n\nexport default streamListReducer;","import { combineReducers } from 'redux';\nimport propertyListReducer from \"./propertyListReducer\";\n\nconst rootReducer = combineReducers({\n\tpropertyListReducer\n});\n\nexport default rootReducer;","import { createStore, compose, applyMiddleware } from 'redux'\nimport { cacheEnhancer } from 'redux-cache'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers'\nimport logger from 'redux-logger'\n\n\nconst configureStore = (initialState = {}) => \n    createStore(\n        rootReducer,\n        initialState,\n        compose(\n            applyMiddleware(thunk, logger),\n            cacheEnhancer({ log: true }),            \n            window.__REDUX_DEVTOOLS_EXTENSION__\n            ? window.__REDUX_DEVTOOLS_EXTENSION__()\n            : f => f\n        )\n    );\n\n\nexport default configureStore;","import React from 'react';\nimport {\n    Card, CardImg, CardBody,\n    CardTitle, CardSubtitle, Button\n  } from 'reactstrap';\nimport Truncate from 'react-truncate';\n\nconst PropertyItem = (props) => {\n    return (<div>\n            <Card className=\"shadow\" >\n                <a href={`https://emeraldstay.com/property/${props.property.slug}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                    {props.property.open_graph_image_cache \n                        ? <CardImg top width=\"100%\" src={props.property.open_graph_image_cache} alt=\"Card image cap\" />\n                        : <CardImg top width=\"100%\" src=\"https://reactstrap.github.io/assets/318x180.svg\" alt=\"Card image cap\" />                    \n                    }\n                    <CardBody>\n                        <strong>\n                            <CardTitle>                                \n                                    <Truncate lines={1} ellipsis={<span>...</span>}>                            \n                                        {props.property.title}\n                                    </Truncate>                            \n                            </CardTitle>\n                        </strong>\n                        <CardSubtitle className=\"my-1\">\n                            <i className=\"fas fa-map-pin\"></i>\n                            <span className=\"pl-3\"> {props.property.city}</span>\n                        </CardSubtitle>\n                        <CardSubtitle className=\"my-1\">\n                            <i className=\"fas fa-bed pr-2\"></i>\n                            <span>{props.property.number_of_bedrooms} Bedrooms, </span> \n                            {props.property.beds_adults \n                                ? <span> {props.property.beds_adults} Adults beds </span>\n                                : null}                           \n                        </CardSubtitle>\n                        <CardSubtitle className=\"my-1\">\n                            <i className=\"fas fa-euro-sign\"></i>\n                            from <strong>€{props.property.property_price}</strong> / night\n                        </CardSubtitle>\n                        <CardSubtitle className=\"d-flex flex-row-reverse\">\n                            <Button color=\"warning\" className=\"mt-3\"><strong>BOOK</strong></Button> \n                        </CardSubtitle>\n                    </CardBody>\n                </a>\n            </Card>\n        </div>\n    );\n}\n\nexport default PropertyItem;","import React from 'react';\nimport { connect } from \"react-redux\";\nimport PropertyItem from \"../PropertyItem/PropertyItem\";\nimport { Spinner } from 'reactstrap';\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport { fetchMoreProperties } from \"../../redux/propertyListActions\"\n\n\nclass PropertyList extends React.Component {    \n    constructor(props) {\n        super(props);\n        this.state = { \n            loadMore: true,\n            propertiesToLoad: [],\n            page: 1\n        }\n    }\n\n    componentDidMount() {\n        this.props.fetchMoreProperties(1)\n    }\n\n    loadMoreProperties() {        \n        // prevents async api duplicity calls\n        this.setState({loadMore:false})\n        // add new items to already loaded\n        this.props.fetchMoreProperties(this.state.page).then(() => {            \n            this.setState({\n                propertiesToLoad: this.state.propertiesToLoad.concat(this.props.fetchedProperties),\n                loadMore: true,\n                page: this.state.page + 1\n            })\n        }) \n    }\n    \n    render() {        \n        if(this.props.fetchedProperties.length > 0) {\n            return (\n                <InfiniteScroll\n                    className=\"row\"\n                    pageStart={0}\n                    loadMore={this.loadMoreProperties.bind(this)}\n                    hasMore={this.state.loadMore}\n                    useWindow={true}\n                    threshold={800}\n                    loader={\n                        <div className=\"loader\" key={0}>                            \n                            <Spinner color=\"warning\" key=\"0\" className=\"spinner\"/>\n                        </div>}>\n                    {/* Show items when user hit bottom of browser */}\n                    {this.state.propertiesToLoad.map((property, i) => (\n                        <div className=\"col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 col-xxl-3 mt-4\" key={i}>\n                            <PropertyItem property={property} key={i}/>\n                        </div>\n                    ))}\n                        \n                </InfiniteScroll>                \n            )\n        }\n        else {            \n            return(\n                <Spinner color=\"warning\" type=\"grow\" style={{position: \"fixed\",width:\"4rem\",height: \"4rem\",transform: \"translateX(-50%,-50%)\",top: \"50%\",left: \"50%\"}}/>\n            )\n        }\n    }\n}\n\n\nconst mapDispatchToProps = (dispatch) => ({\n    fetchMoreProperties: (page) => dispatch(fetchMoreProperties(page))\n})\n\nconst mapStateToProps = state => ({\n    fetchedProperties: state.propertyListReducer.fetchedProperties\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PropertyList);","import React from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink } from 'reactstrap';\n\nexport default class Navigation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      isOpen: false\n    };\n  }\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Navbar light expand=\"md\" style={{background: \"#ffc108\"}}>\n          <div className=\"container\">\n          <NavbarBrand>\n            <i className=\"far fa-building\"></i>\n            <span> properties</span>\n          </NavbarBrand>\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={this.state.isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>              \n              <NavItem>\n                <NavLink href=\"https://github.com/surfer19/react-properties\" target=\"_blank\"><strong>GitHub</strong></NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n          </div>\n        </Navbar>        \n      </div>\n    );\n  }\n}","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter, Route } from \"react-router-dom\";\nimport configureStore from '../../redux/configureStore';\nimport PropertyList from \"../PropertyList/PropertyList\";\nimport Navigation from \"../Navigation/Navigation\";\n\nconst store = configureStore()\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navigation/>\n      <div className=\"container-fluid\">        \n          <Provider store={store}>\n            <HashRouter basename=\"/\">\n              <Route exact path=\"/\" component={PropertyList} />\n            </HashRouter>\n          </Provider>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.scss';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}